-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsJavalette where

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read)

data Prog = Program [Fun]
  deriving (Eq, Ord, Show, Read)

data Fun = FnDef Type Ident [Arg] Blk
  deriving (Eq, Ord, Show, Read)

data Arg = Argument Type Ident
  deriving (Eq, Ord, Show, Read)

data Blk = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Empty
    | BStmt Blk
    | Decl Type [Item]
    | Ass Ident Expr
    | Incr Ident
    | Decr Ident
    | ReturnE Expr
    | ReturnV
    | Cond Expr Stmt
    | CondElse Expr Stmt Stmt
    | While Expr Stmt
    | Sexp Expr
  deriving (Eq, Ord, Show, Read)

data Item = NonInit Ident | Init Ident Expr
  deriving (Eq, Ord, Show, Read)

data Type = TInt | TDoub | TBool | TVoid | TFun Type [Type]
  deriving (Eq, Ord, Show, Read)

data Expr
    = Evar Ident
    | ELitInt Integer
    | ELitDoub Double
    | ELitTrue
    | ELitFalse
    | EAPP Ident [Expr]
    | EString String
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div | Modulo
  deriving (Eq, Ord, Show, Read)

data RelOp = Lt | Le | Gt | Ge | Eq | Ne
  deriving (Eq, Ord, Show, Read)

