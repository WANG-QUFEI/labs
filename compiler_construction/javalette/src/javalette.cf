-- programs -----------------------------------------------

entrypoints Prog;

Program. Prog ::= [Fun];

FnDef. Fun ::= Type Ident "(" [Arg] ")" Blk;

separator nonempty Fun "";

Argument. Arg ::= Type Ident;

separator Arg ",";

-- statements ----------------------------------------------

Block. Blk ::= "{" [Stmt] "}";

separator Stmt "";

Empty. Stmt ::= ";" ;

BStmt. Stmt ::= Blk;

Decl. Stmt ::= Type [Item] ";" ;

NonInit. Item ::= Ident;

Init. Item ::= Ident "=" Expr;

separator nonempty Item ",";

Ass. Stmt ::= Ident "=" Expr ";" ;

Incr. Stmt ::= Ident "++" ";" ;

Decr. Stmt ::= Ident "--" ";" ;

ReturnE. Stmt ::= "return" Expr ";" ;

ReturnV. Stmt ::= "return" ";" ;

Cond. Stmt ::= "if" "(" Expr ")" Stmt;

CondElse. Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt;

While. Stmt ::= "while" "(" Expr ")" Stmt;

Sexp. Stmt ::= Expr ";" ;

-- Types ----------------------------------------------- ----

TInt. Type ::= "int";

TDoub. Type ::= "double";

TBool. Type ::= "boolean";

TVoid. Type ::= "void";

internal TFun. Type ::= Type "(" [Type] ")";

separator Type ",";

-- Expressions ---------------------------------------------

Evar. Expr6 ::= Ident;

ELitInt. Expr6 ::= Integer;

ELitDoub. Expr6 ::= Double;

ELitTrue. Expr6 ::= "true";

ELitFalse. Expr6 ::= "false";

EAPP. Expr6 ::= Ident "(" [Expr] ")";

EString. Expr6 ::= String;

Neg. Expr5 ::= "-" Expr6;

Not. Expr5 ::= "!" Expr6;

EMul. Expr4 ::= Expr4 MulOp Expr5;

EAdd. Expr3 ::= Expr3 AddOp Expr4;

ERel. Expr2 ::= Expr2 RelOp Expr3;

EAnd. Expr1 ::= Expr2 "&&" Expr1;

EOr. Expr ::= Expr1 "||" Expr;

coercions Expr 6;

separator Expr ",";

-- operators -----------------------------------------------

Plus. AddOp ::= "+";

Minus. AddOp ::= "-";

Times. MulOp ::= "*";

Div. MulOp ::= "/";

Modulo. MulOp ::= "%";

Lt. RelOp ::= "<";

Le. RelOp ::= "<=";

Gt. RelOp ::= ">";

Ge. RelOp ::= ">=";

Eq. RelOp ::= "==";

Ne. RelOp ::= "!=";

-- comments ----------------------------------------------- -

comment "#";

comment "//";

comment "/*" "*/";